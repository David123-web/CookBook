// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  userType     String
  businessName String
  email        String    @unique
  password     String
  dateOfBirth  DateTime
  address      String
  city         String
  postalCode   String
  isAdmin      Boolean   @default(false)
  isOnline     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  profile      Profile?
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  bookings     Booking[]
  reviews      ProfileReview[]
}

model Profile {
  id               Int                @id @default(autoincrement())
  description      String?
  position         String             @default("New member")
  imgUrl           String             @default("https://c.files.bbci.co.uk/10E5A/production/_105901296_male.jpg")
  hourlyRate       Float?
  yearsOfExperience Int?
  userId           Int                @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  user             User               @relation(fields: [userId], references: [id])
  specializationTags UserTag[]
  availableDates   AvailableDate[]
  bookings         Booking[]
  reviews          ProfileReview[]
}

model SpecializationTag {
  id        Int       @id @default(autoincrement())
  tagName   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userTags  UserTag[]
}

model UserTag {
  id                  Int                @id @default(autoincrement())
  profileId           Int
  specializationTagId Int
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  profile             Profile            @relation(fields: [profileId], references: [id])
  specializationTag   SpecializationTag  @relation(fields: [specializationTagId], references: [id])
}

model AvailableDate {
  id         Int      @id @default(autoincrement())
  profileId  Int
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  profile    Profile  @relation(fields: [profileId], references: [id])
}

model Message {
  id              Int      @id @default(autoincrement())
  title           String?
  content         String?
  userId          Int
  recipientUserId Int
  new             Boolean  @default(true)
  date            DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  sender          User     @relation("SentMessages", fields: [userId], references: [id])
  recipient       User     @relation("ReceivedMessages", fields: [recipientUserId], references: [id])
  bookings        Booking[]
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  profileId  Int
  messageId  Int?
  accepted   Boolean  @default(false)
  date       DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  profile    Profile  @relation(fields: [profileId], references: [id])
  message    Message? @relation(fields: [messageId], references: [id])
}

model ProfileReview {
  id           Int      @id @default(autoincrement())
  title        String?
  content      String?
  reviewScore  Float?
  userId       Int
  profileId    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])
  profile      Profile  @relation(fields: [profileId], references: [id])
}
